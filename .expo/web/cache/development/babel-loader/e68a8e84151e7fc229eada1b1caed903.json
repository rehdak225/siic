{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Axios from \"axios\";\nimport { POST, UPDATE, GET, DELETE, PATCH } from \"../constants/request-type\";\nvar error_type = \"no-type defined\";\n\nvar MakeRequestAsync = function _callee(_ref) {\n  var type, url, route, data, token, _ref$contentType, contentType, config;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          type = _ref.type, url = _ref.url, route = _ref.route, data = _ref.data, token = _ref.token, _ref$contentType = _ref.contentType, contentType = _ref$contentType === void 0 ? \"application/json\" : _ref$contentType;\n          config = {\n            headers: {\n              \"Content-Type\": contentType,\n              authorization: token\n            }\n          };\n          _context.t0 = type;\n          _context.next = _context.t0 === POST ? 5 : _context.t0 === UPDATE ? 8 : _context.t0 === PATCH ? 11 : _context.t0 === GET ? 14 : _context.t0 === DELETE ? 17 : 20;\n          break;\n\n        case 5:\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(Axios.post(url + \"/\" + route, data, config));\n\n        case 7:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 8:\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(Axios.put(url + \"/\" + route, data, config));\n\n        case 10:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 11:\n          _context.next = 13;\n          return _regeneratorRuntime.awrap(Axios.patch(url + \"/\" + route, data, config));\n\n        case 13:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 14:\n          _context.next = 16;\n          return _regeneratorRuntime.awrap(Axios.get(url + \"/\" + route, config, data));\n\n        case 16:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 17:\n          _context.next = 19;\n          return _regeneratorRuntime.awrap(Axios.delete(url + \"/\" + route, config, data));\n\n        case 19:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 20:\n          return _context.abrupt(\"return\", error_type);\n\n        case 21:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar MakeRequest = function MakeRequest(_ref2) {\n  var type = _ref2.type,\n      url = _ref2.url,\n      route = _ref2.route,\n      data = _ref2.data,\n      token = _ref2.token,\n      _ref2$contentType = _ref2.contentType,\n      contentType = _ref2$contentType === void 0 ? \"application/json\" : _ref2$contentType;\n  var config = {\n    headers: {\n      \"Content-Type\": contentType,\n      authorization: token\n    }\n  };\n\n  switch (type) {\n    case POST:\n      return Axios.post(url + \"/\" + route, data, config);\n\n    case UPDATE:\n      return Axios.put(url + \"/\" + route, data, config);\n\n    case PATCH:\n      return Axios.patch(url + \"/\" + route, data, config);\n\n    case GET:\n      return Axios.get(url + \"/\" + route, config, data);\n\n    case DELETE:\n      return Axios.delete(url + \"/\" + route, data, config);\n\n    default:\n      return error_type;\n  }\n};\n\nexport { MakeRequestAsync, MakeRequest };","map":{"version":3,"sources":["C:/Users/PC GAMING/Desktop/Kadher/boiler_plate_rn/src/functions/axios.js"],"names":["Axios","POST","UPDATE","GET","DELETE","PATCH","error_type","MakeRequestAsync","type","url","route","data","token","contentType","config","headers","authorization","post","put","patch","get","delete","MakeRequest"],"mappings":"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","sourcesContent":["import Axios from \"axios\";\nimport { POST, UPDATE, GET, DELETE, PATCH } from \"../constants/request-type\";\n\nconst error_type = \"no-type defined\";\n\nconst MakeRequestAsync = async ({\n  type,\n  url,\n  route,\n  data,\n  token,\n  contentType = \"application/json\"\n}) => {\n  let config = {\n    headers: {\n      \"Content-Type\": contentType,\n      authorization: token\n    }\n  };\n  switch (type) {\n    case POST:\n      return await Axios.post(`${url}/${route}`, data, config);\n    // break;\n    case UPDATE:\n      return await Axios.put(`${url}/${route}`, data, config);\n    // break;\n    case PATCH:\n      return await Axios.patch(`${url}/${route}`, data, config);\n    // break;\n    case GET:\n      return await Axios.get(`${url}/${route}`, config, data);\n    // break;\n    case DELETE:\n      return await Axios.delete(`${url}/${route}`, config, data);\n    // break;\n    default:\n      return error_type;\n  }\n};\n\nconst MakeRequest = ({\n  type,\n  url,\n  route,\n  data,\n  token,\n  contentType = \"application/json\"\n}) => {\n  let config = {\n    headers: {\n      \"Content-Type\": contentType,\n      authorization: token\n    }\n  };\n  switch (type) {\n    case POST:\n      return Axios.post(`${url}/${route}`, data, config);\n    // break;\n    case UPDATE:\n      return Axios.put(`${url}/${route}`, data, config);\n    // break;\n    case PATCH:\n      return Axios.patch(`${url}/${route}`, data, config);\n    // break;\n    case GET:\n      return Axios.get(`${url}/${route}`, config, data);\n    // break;\n    case DELETE:\n      return Axios.delete(`${url}/${route}`, data, config);\n    // break;\n    default:\n      return error_type;\n  }\n};\n\nexport { MakeRequestAsync, MakeRequest };\n"]},"metadata":{},"sourceType":"module"}