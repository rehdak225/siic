{"ast":null,"code":"import { Reanimated } from \"./reanimatedWrapper\";\nimport { State } from \"../../State\";\nimport { tagMessage } from \"../../utils\";\nvar warningMessage = tagMessage('react-native-reanimated is required in order to use synchronous state management');\nexport var GestureStateManager = {\n  create: function () {\n    var _f = function _f(handlerTag) {\n      return {\n        begin: function () {\n          var _f = function _f() {\n            if (Reanimated) {\n              Reanimated.setGestureState(handlerTag, State.BEGAN);\n            } else {\n              console.warn(warningMessage);\n            }\n          };\n\n          _f._closure = {\n            Reanimated: Reanimated,\n            handlerTag: handlerTag,\n            State: {\n              BEGAN: State.BEGAN\n            },\n            warningMessage: warningMessage\n          };\n          _f.asString = \"function _f(){const{Reanimated,handlerTag,State,warningMessage}=jsThis._closure;{if(Reanimated){Reanimated.setGestureState(handlerTag,State.BEGAN);}else{console.warn(warningMessage);}}}\";\n          _f.__workletHash = 5423834197456;\n          _f.__location = \"C:\\\\Users\\\\PC GAMING\\\\Desktop\\\\Kadher\\\\boiler_plate_rn\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\gestureStateManager.js (10:13)\";\n          return _f;\n        }(),\n        activate: function () {\n          var _f = function _f() {\n            if (Reanimated) {\n              Reanimated.setGestureState(handlerTag, State.ACTIVE);\n            } else {\n              console.warn(warningMessage);\n            }\n          };\n\n          _f._closure = {\n            Reanimated: Reanimated,\n            handlerTag: handlerTag,\n            State: {\n              ACTIVE: State.ACTIVE\n            },\n            warningMessage: warningMessage\n          };\n          _f.asString = \"function _f(){const{Reanimated,handlerTag,State,warningMessage}=jsThis._closure;{if(Reanimated){Reanimated.setGestureState(handlerTag,State.ACTIVE);}else{console.warn(warningMessage);}}}\";\n          _f.__workletHash = 6604793719507;\n          _f.__location = \"C:\\\\Users\\\\PC GAMING\\\\Desktop\\\\Kadher\\\\boiler_plate_rn\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\gestureStateManager.js (19:16)\";\n          return _f;\n        }(),\n        fail: function () {\n          var _f = function _f() {\n            if (Reanimated) {\n              Reanimated.setGestureState(handlerTag, State.FAILED);\n            } else {\n              console.warn(warningMessage);\n            }\n          };\n\n          _f._closure = {\n            Reanimated: Reanimated,\n            handlerTag: handlerTag,\n            State: {\n              FAILED: State.FAILED\n            },\n            warningMessage: warningMessage\n          };\n          _f.asString = \"function _f(){const{Reanimated,handlerTag,State,warningMessage}=jsThis._closure;{if(Reanimated){Reanimated.setGestureState(handlerTag,State.FAILED);}else{console.warn(warningMessage);}}}\";\n          _f.__workletHash = 2423361914396;\n          _f.__location = \"C:\\\\Users\\\\PC GAMING\\\\Desktop\\\\Kadher\\\\boiler_plate_rn\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\gestureStateManager.js (28:12)\";\n          return _f;\n        }(),\n        end: function () {\n          var _f = function _f() {\n            if (Reanimated) {\n              Reanimated.setGestureState(handlerTag, State.END);\n            } else {\n              console.warn(warningMessage);\n            }\n          };\n\n          _f._closure = {\n            Reanimated: Reanimated,\n            handlerTag: handlerTag,\n            State: {\n              END: State.END\n            },\n            warningMessage: warningMessage\n          };\n          _f.asString = \"function _f(){const{Reanimated,handlerTag,State,warningMessage}=jsThis._closure;{if(Reanimated){Reanimated.setGestureState(handlerTag,State.END);}else{console.warn(warningMessage);}}}\";\n          _f.__workletHash = 4444470920720;\n          _f.__location = \"C:\\\\Users\\\\PC GAMING\\\\Desktop\\\\Kadher\\\\boiler_plate_rn\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\gestureStateManager.js (37:11)\";\n          return _f;\n        }()\n      };\n    };\n\n    _f._closure = {\n      Reanimated: Reanimated,\n      State: {\n        BEGAN: State.BEGAN,\n        ACTIVE: State.ACTIVE,\n        FAILED: State.FAILED,\n        END: State.END\n      },\n      warningMessage: warningMessage\n    };\n    _f.asString = \"function create(handlerTag){const{Reanimated,State,warningMessage}=jsThis._closure;{return{begin:function(){'worklet';if(Reanimated){Reanimated.setGestureState(handlerTag,State.BEGAN);}else{console.warn(warningMessage);}},activate:function(){'worklet';if(Reanimated){Reanimated.setGestureState(handlerTag,State.ACTIVE);}else{console.warn(warningMessage);}},fail:function(){'worklet';if(Reanimated){Reanimated.setGestureState(handlerTag,State.FAILED);}else{console.warn(warningMessage);}},end:function(){'worklet';if(Reanimated){Reanimated.setGestureState(handlerTag,State.END);}else{console.warn(warningMessage);}}};}}\";\n    _f.__workletHash = 3329128186569;\n    _f.__location = \"C:\\\\Users\\\\PC GAMING\\\\Desktop\\\\Kadher\\\\boiler_plate_rn\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\gestureStateManager.js\";\n    return _f;\n  }()\n};","map":{"version":3,"sources":["gestureStateManager.ts"],"names":["warningMessage","tagMessage","GestureStateManager","create","handlerTag","begin","Reanimated","State","console","activate","fail","end"],"mappings":"AAAA,SAAA,UAAA;AACA,SAAA,KAAA;AACA,SAAA,UAAA;AASA,IAAMA,cAAc,GAAGC,UAAU,CAC/B,kFAD+B,CAAjC;AAIA,OAAO,IAAMC,mBAAmB,GAAG;AACjCC,EAAAA,MADiC;AAAA,yBAC1BC,UAD0B,EACmB;AAElD,aAAO;AACLC,QAAAA,KAAK;AAAA,iCAAQ;AAEX,gBAAA,UAAA,EAAgB;AACdC,cAAAA,UAAU,CAAVA,eAAAA,CAAAA,UAAAA,EAAuCC,KAAK,CAA5CD,KAAAA;AADF,aAAA,MAEO;AACLE,cAAAA,OAAO,CAAPA,IAAAA,CAAAA,cAAAA;AACD;AAPE,WACA;;AAAA;AAAA,wBAjBX,UAiBW;AAAA,wBARYP,UAQZ;AAAA;AAAA,qBAPT,KAAA,CADF;AAQW;AAAA,4BAHH;AAGG;AAAA;AAAA;AAAA;AAAA;AAAA,WADA;AAULQ,QAAAA,QAAQ;AAAA,iCAAQ;AAEd,gBAAA,UAAA,EAAgB;AACdH,cAAAA,UAAU,CAAVA,eAAAA,CAAAA,UAAAA,EAAuCC,KAAK,CAA5CD,MAAAA;AADF,aAAA,MAEO;AACLE,cAAAA,OAAO,CAAPA,IAAAA,CAAAA,cAAAA;AACD;AAhBE,WAUG;;AAAA;AAAA,wBA1Bd,UA0Bc;AAAA,wBAjBSP,UAiBT;AAAA;AAAA,sBAhBZ,KAAA,CADF;AAiBc;AAAA,4BAZN;AAYM;AAAA;AAAA;AAAA;AAAA;AAAA,WAVH;AAmBLS,QAAAA,IAAI;AAAA,iCAAQ;AAEV,gBAAA,UAAA,EAAgB;AACdJ,cAAAA,UAAU,CAAVA,eAAAA,CAAAA,UAAAA,EAAuCC,KAAK,CAA5CD,MAAAA;AADF,aAAA,MAEO;AACLE,cAAAA,OAAO,CAAPA,IAAAA,CAAAA,cAAAA;AACD;AAzBE,WAmBD;;AAAA;AAAA,wBAnCV,UAmCU;AAAA,wBA1BaP,UA0Bb;AAAA;AAAA,sBAzBR,KAAA,CADF;AA0BU;AAAA,4BArBF;AAqBE;AAAA;AAAA;AAAA;AAAA;AAAA,WAnBC;AA4BLU,QAAAA,GAAG;AAAA,iCAAQ;AAET,gBAAA,UAAA,EAAgB;AACdL,cAAAA,UAAU,CAAVA,eAAAA,CAAAA,UAAAA,EAAuCC,KAAK,CAA5CD,GAAAA;AADF,aAAA,MAEO;AACLE,cAAAA,OAAO,CAAPA,IAAAA,CAAAA,cAAAA;AACD;AACF,WAPE;;AAAA;AAAA,wBA5CT,UA4CS;AAAA,wBAnCcP,UAmCd;AAAA;AAAA,mBAlCP,KAAA,CADF;AAmCS;AAAA,4BA9BD;AA8BC;AAAA;AAAA;AAAA;AAAA;AAAA;AA5BE,OAAP;AAqCD,KAxCgC;;AAAA;AAAA,kBA2BzBO,UA3ByB;AAAA;AAAA,e,WAAA;AAAA,gBAU1B,KAAA,CAAA,MAV0B;AAAA,gBAmB1B,KAAA,CAAA,MAnB0B;AAAA,aA4B1B,KAAA,CAAA;AA5B0B;AAAA,sBA+BlB;AA/BkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA5B","sourcesContent":["import { Reanimated } from './reanimatedWrapper';\nimport { State } from '../../State';\nimport { tagMessage } from '../../utils';\n\nexport interface GestureStateManagerType {\n  begin: () => void;\n  activate: () => void;\n  fail: () => void;\n  end: () => void;\n}\n\nconst warningMessage = tagMessage(\n  'react-native-reanimated is required in order to use synchronous state management'\n);\n\nexport const GestureStateManager = {\n  create(handlerTag: number): GestureStateManagerType {\n    'worklet';\n    return {\n      begin: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.BEGAN);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      activate: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.ACTIVE);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      fail: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.FAILED);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      end: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.END);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"module"}