{"ast":null,"code":"import * as EmailValidator from \"email-validator\";\n\nvar passwordValidator = require(\"password-validator\");\n\nvar schema = new passwordValidator();\nschema.is().min(8).is().max(100).has().uppercase().has().lowercase().has().digits().has().not().spaces().is().not();\n\nvar EmailValidation = function EmailValidation(email) {\n  if (EmailValidator.validate(email)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nvar PasswordValidation = function PasswordValidation(password) {\n  if (schema.validate(password)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nexport { EmailValidation, PasswordValidation };","map":{"version":3,"sources":["C:/Users/PC GAMING/Desktop/Kadher/boiler_plate_rn/src/functions/validateEmailPassword.js"],"names":["EmailValidator","passwordValidator","require","schema","is","min","max","has","uppercase","lowercase","digits","not","spaces","EmailValidation","email","validate","PasswordValidation","password"],"mappings":"AAAA,OAAO,KAAKA,cAAZ,MAAgC,iBAAhC;;AACA,IAAIC,iBAAiB,GAAGC,OAAO,CAAC,oBAAD,CAA/B;;AAEA,IAAIC,MAAM,GAAG,IAAIF,iBAAJ,EAAb;AAEAE,MAAM,CACHC,EADH,GAEGC,GAFH,CAEO,CAFP,EAGGD,EAHH,GAIGE,GAJH,CAIO,GAJP,EAKGC,GALH,GAMGC,SANH,GAOGD,GAPH,GAQGE,SARH,GASGF,GATH,GAUGG,MAVH,GAWGH,GAXH,GAYGI,GAZH,GAaGC,MAbH,GAcGR,EAdH,GAeGO,GAfH;;AAiBA,IAAME,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAW;AACjC,MAAId,cAAc,CAACe,QAAf,CAAwBD,KAAxB,CAAJ,EAAoC;AAClC,WAAO,IAAP;AACD,GAFD,MAEO;AACL,WAAO,KAAP;AACD;AACF,CAND;;AAQA,IAAME,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD,EAAc;AACvC,MAAId,MAAM,CAACY,QAAP,CAAgBE,QAAhB,CAAJ,EAA+B;AAC7B,WAAO,IAAP;AACD,GAFD,MAEO;AACL,WAAO,KAAP;AACD;AACF,CAND;;AAQA,SAASJ,eAAT,EAA0BG,kBAA1B","sourcesContent":["import * as EmailValidator from \"email-validator\";\nvar passwordValidator = require(\"password-validator\");\n\nvar schema = new passwordValidator();\n\nschema\n  .is()\n  .min(8)\n  .is()\n  .max(100)\n  .has()\n  .uppercase()\n  .has()\n  .lowercase()\n  .has()\n  .digits()\n  .has()\n  .not()\n  .spaces()\n  .is()\n  .not();\n\nconst EmailValidation = (email) => {\n  if (EmailValidator.validate(email)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst PasswordValidation = (password) => {\n  if (schema.validate(password)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nexport { EmailValidation, PasswordValidation };\n"]},"metadata":{},"sourceType":"module"}